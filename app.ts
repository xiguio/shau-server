/*
 * @Author: qiao
 * @Date: 2018-07-01 11:15:47
 * @Last Modified by: yarnü§°
 * @Last Modified time: 2018-07-17 15:13:54
 * appÂêØÂä®Êñá‰ª∂ÔºåÁî®‰∫éËá™ÂÆö‰πâÂêØÂä®Êó∂ÁöÑÂàùÂßãÂåñÂ∑•‰Ωú,Âè™ËøîÂõû‰∏Ä‰∏™ÂáΩÊï∞
 */
import { Application } from 'egg';
import useRole from './app/auth/role';

export default (app: Application) => {
  const { logger } = app;
  // Ê∑ªÂä†Ëá™ÂÆö‰πâÊ†°È™åËßÑÂàô
  const validator = app.validator;
  validator.addRule('numberString', (rule, value: string) => {
    // ‰∏çÁî®Ê†°È™årequiredÔºåÂè™ÈúÄË¶ÅÂÅöÁ±ªÂûãËΩ¨Êç¢Âíåmax‰∏éminÁöÑÊ†°È™åÔºåÂ¶ÇÊûúrequire‰∏∫falseÔºåÂπ∂‰∏î
    // ÂèÇÊï∞‰∏≠Ê≤°ÊúâvalueÔºåÂàô‰∏ç‰ºöË∞ÉÁî®Ê≠§ÂáΩÊï∞
    logger.info(rule);
    logger.info(value);

    const field = rule.field;
    if (!field) {
      throw new Error('validate error: the field is not set! the params is: ' + value);
    }
    // Ê≠£ÂàôÊ†°È™å
    const re = /^\d+(\.\d+)?$/;
    if (!re.test(value)) {
      throw new Error(`validate error: the value (${value}) is not a number! `);
    }

    const num = parseInt(value, 10);
    if (rule.max !== undefined && num > rule.max) {
      throw new Error(`validate error: the value (${value}) is bigger then ${rule.max}!`);
    }

    if (rule.min !== undefined && num < rule.min) {
      throw new Error(`validate error: the value (${value}) is smaller then ${rule.min}!`);
    }
    // params[field] = num;
  });

  app.beforeStart(async () => {

    app.logger.info('app beforeStart');

    if (app.env === 'local') {
      // app.logger.info('sync db ...');
      await app.model.sync({ alter: true });
      // app.logger.info('sync db completed ...');
    }
  });

  // Âä†ËΩΩegg-userroleÈÖçÁΩÆ
  useRole(app);
 };
